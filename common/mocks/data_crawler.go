// Code generated by MockGen. DO NOT EDIT.
// Source: data_crawler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/byorty/contractor/common"
	gomock "github.com/golang/mock/gomock"
)

// MockDataCrawler is a mock of DataCrawler interface.
type MockDataCrawler struct {
	ctrl     *gomock.Controller
	recorder *MockDataCrawlerMockRecorder
}

// MockDataCrawlerMockRecorder is the mock recorder for MockDataCrawler.
type MockDataCrawlerMockRecorder struct {
	mock *MockDataCrawler
}

// NewMockDataCrawler creates a new mock instance.
func NewMockDataCrawler(ctrl *gomock.Controller) *MockDataCrawler {
	mock := &MockDataCrawler{ctrl: ctrl}
	mock.recorder = &MockDataCrawlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataCrawler) EXPECT() *MockDataCrawlerMockRecorder {
	return m.recorder
}

// Walk mocks base method.
func (m *MockDataCrawler) Walk(data interface{}, handler common.DataCrawlerHandler, opts ...common.DataCrawlerOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{data, handler}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Walk", varargs...)
}

// Walk indicates an expected call of Walk.
func (mr *MockDataCrawlerMockRecorder) Walk(data, handler interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{data, handler}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockDataCrawler)(nil).Walk), varargs...)
}
