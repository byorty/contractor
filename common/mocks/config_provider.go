// Code generated by MockGen. DO NOT EDIT.
// Source: config_provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/byorty/contractor/common"
	gomock "github.com/golang/mock/gomock"
	config "go.uber.org/config"
)

// MockConfigProviderFactory is a mock of ConfigProviderFactory interface.
type MockConfigProviderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderFactoryMockRecorder
}

// MockConfigProviderFactoryMockRecorder is the mock recorder for MockConfigProviderFactory.
type MockConfigProviderFactoryMockRecorder struct {
	mock *MockConfigProviderFactory
}

// NewMockConfigProviderFactory creates a new mock instance.
func NewMockConfigProviderFactory(ctrl *gomock.Controller) *MockConfigProviderFactory {
	mock := &MockConfigProviderFactory{ctrl: ctrl}
	mock.recorder = &MockConfigProviderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProviderFactory) EXPECT() *MockConfigProviderFactoryMockRecorder {
	return m.recorder
}

// CreateByFiles mocks base method.
func (m *MockConfigProviderFactory) CreateByFiles(filenames ...string) (common.ConfigProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range filenames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateByFiles", varargs...)
	ret0, _ := ret[0].(common.ConfigProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByFiles indicates an expected call of CreateByFiles.
func (mr *MockConfigProviderFactoryMockRecorder) CreateByFiles(filenames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByFiles", reflect.TypeOf((*MockConfigProviderFactory)(nil).CreateByFiles), filenames...)
}

// CreateByOptions mocks base method.
func (m *MockConfigProviderFactory) CreateByOptions(options ...config.YAMLOption) (common.ConfigProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateByOptions", varargs...)
	ret0, _ := ret[0].(common.ConfigProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByOptions indicates an expected call of CreateByOptions.
func (mr *MockConfigProviderFactoryMockRecorder) CreateByOptions(options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByOptions", reflect.TypeOf((*MockConfigProviderFactory)(nil).CreateByOptions), options...)
}

// MockConfigProvider is a mock of ConfigProvider interface.
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider.
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance.
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// Populate mocks base method.
func (m *MockConfigProvider) Populate(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Populate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Populate indicates an expected call of Populate.
func (mr *MockConfigProviderMockRecorder) Populate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Populate", reflect.TypeOf((*MockConfigProvider)(nil).Populate), arg0)
}

// PopulateByKey mocks base method.
func (m *MockConfigProvider) PopulateByKey(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateByKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateByKey indicates an expected call of PopulateByKey.
func (mr *MockConfigProviderMockRecorder) PopulateByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateByKey", reflect.TypeOf((*MockConfigProvider)(nil).PopulateByKey), arg0, arg1)
}
