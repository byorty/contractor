// Code generated by MockGen. DO NOT EDIT.
// Source: expression_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/byorty/contractor/common"
	gomock "github.com/golang/mock/gomock"
)

// MockExpressionFactory is a mock of ExpressionFactory interface.
type MockExpressionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockExpressionFactoryMockRecorder
}

// MockExpressionFactoryMockRecorder is the mock recorder for MockExpressionFactory.
type MockExpressionFactoryMockRecorder struct {
	mock *MockExpressionFactory
}

// NewMockExpressionFactory creates a new mock instance.
func NewMockExpressionFactory(ctrl *gomock.Controller) *MockExpressionFactory {
	mock := &MockExpressionFactory{ctrl: ctrl}
	mock.recorder = &MockExpressionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpressionFactory) EXPECT() *MockExpressionFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExpressionFactory) Create(exprType common.ExpressionType, exprName interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", exprType, exprName)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExpressionFactoryMockRecorder) Create(exprType, exprName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExpressionFactory)(nil).Create), exprType, exprName)
}
