// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	saved "github.com/byorty/contractor/tester/graylog/client/saved"
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SearchRelative mocks base method.
func (m *MockClient) SearchRelative(params *saved.SearchRelativeParams, authInfo runtime.ClientAuthInfoWriter, opts ...saved.ClientOption) (*saved.SearchRelativeOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchRelative", varargs...)
	ret0, _ := ret[0].(*saved.SearchRelativeOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRelative indicates an expected call of SearchRelative.
func (mr *MockClientMockRecorder) SearchRelative(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRelative", reflect.TypeOf((*MockClient)(nil).SearchRelative), varargs...)
}
