// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchResponse search response
//
// swagger:model SearchResponse
type SearchResponse struct {

	// built query
	BuiltQuery string `json:"built_query,omitempty"`

	// decoration stats
	DecorationStats *SearchResponseDecorationStats `json:"decoration_stats,omitempty"`

	// fields
	Fields []string `json:"fields"`

	// from
	// Format: date-time
	From strfmt.DateTime `json:"from,omitempty"`

	// messages
	Messages []*SearchResponseMessagesItems0 `json:"messages"`

	// query
	Query string `json:"query,omitempty"`

	// time
	Time int64 `json:"time,omitempty"`

	// to
	// Format: date-time
	To strfmt.DateTime `json:"to,omitempty"`

	// total results
	TotalResults int64 `json:"total_results,omitempty"`

	// used indices
	UsedIndices []*SearchResponseUsedIndicesItems0 `json:"used_indices"`
}

// Validate validates this search response
func (m *SearchResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDecorationStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedIndices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResponse) validateDecorationStats(formats strfmt.Registry) error {
	if swag.IsZero(m.DecorationStats) { // not required
		return nil
	}

	if m.DecorationStats != nil {
		if err := m.DecorationStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decoration_stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("decoration_stats")
			}
			return err
		}
	}

	return nil
}

func (m *SearchResponse) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if err := validate.FormatOf("from", "body", "date-time", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SearchResponse) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResponse) validateTo(formats strfmt.Registry) error {
	if swag.IsZero(m.To) { // not required
		return nil
	}

	if err := validate.FormatOf("to", "body", "date-time", m.To.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SearchResponse) validateUsedIndices(formats strfmt.Registry) error {
	if swag.IsZero(m.UsedIndices) { // not required
		return nil
	}

	for i := 0; i < len(m.UsedIndices); i++ {
		if swag.IsZero(m.UsedIndices[i]) { // not required
			continue
		}

		if m.UsedIndices[i] != nil {
			if err := m.UsedIndices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("used_indices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("used_indices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search response based on the context it is used
func (m *SearchResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDecorationStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsedIndices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResponse) contextValidateDecorationStats(ctx context.Context, formats strfmt.Registry) error {

	if m.DecorationStats != nil {
		if err := m.DecorationStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decoration_stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("decoration_stats")
			}
			return err
		}
	}

	return nil
}

func (m *SearchResponse) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {
			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchResponse) contextValidateUsedIndices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsedIndices); i++ {

		if m.UsedIndices[i] != nil {
			if err := m.UsedIndices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("used_indices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("used_indices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchResponse) UnmarshalBinary(b []byte) error {
	var res SearchResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchResponseDecorationStats search response decoration stats
//
// swagger:model SearchResponseDecorationStats
type SearchResponseDecorationStats struct {

	// added fields
	AddedFields []string `json:"added_fields"`

	// changed fields
	ChangedFields []string `json:"changed_fields"`

	// removed fields
	RemovedFields []string `json:"removed_fields"`
}

// Validate validates this search response decoration stats
func (m *SearchResponseDecorationStats) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search response decoration stats based on context it is used
func (m *SearchResponseDecorationStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchResponseDecorationStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchResponseDecorationStats) UnmarshalBinary(b []byte) error {
	var res SearchResponseDecorationStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchResponseMessagesItems0 search response messages items0
//
// swagger:model SearchResponseMessagesItems0
type SearchResponseMessagesItems0 struct {

	// decoration stats
	DecorationStats *SearchResponseMessagesItems0DecorationStats `json:"decoration_stats,omitempty"`

	// highlight ranges
	HighlightRanges interface{} `json:"highlight_ranges,omitempty"`

	// index
	Index string `json:"index,omitempty"`

	// message
	Message interface{} `json:"message,omitempty"`
}

// Validate validates this search response messages items0
func (m *SearchResponseMessagesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDecorationStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResponseMessagesItems0) validateDecorationStats(formats strfmt.Registry) error {
	if swag.IsZero(m.DecorationStats) { // not required
		return nil
	}

	if m.DecorationStats != nil {
		if err := m.DecorationStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decoration_stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("decoration_stats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search response messages items0 based on the context it is used
func (m *SearchResponseMessagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDecorationStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResponseMessagesItems0) contextValidateDecorationStats(ctx context.Context, formats strfmt.Registry) error {

	if m.DecorationStats != nil {
		if err := m.DecorationStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decoration_stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("decoration_stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchResponseMessagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchResponseMessagesItems0) UnmarshalBinary(b []byte) error {
	var res SearchResponseMessagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchResponseMessagesItems0DecorationStats search response messages items0 decoration stats
//
// swagger:model SearchResponseMessagesItems0DecorationStats
type SearchResponseMessagesItems0DecorationStats struct {

	// added fields
	AddedFields interface{} `json:"added_fields,omitempty"`

	// changed fields
	ChangedFields interface{} `json:"changed_fields,omitempty"`

	// removed fields
	RemovedFields interface{} `json:"removed_fields,omitempty"`
}

// Validate validates this search response messages items0 decoration stats
func (m *SearchResponseMessagesItems0DecorationStats) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search response messages items0 decoration stats based on context it is used
func (m *SearchResponseMessagesItems0DecorationStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchResponseMessagesItems0DecorationStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchResponseMessagesItems0DecorationStats) UnmarshalBinary(b []byte) error {
	var res SearchResponseMessagesItems0DecorationStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchResponseUsedIndicesItems0 search response used indices items0
//
// swagger:model SearchResponseUsedIndicesItems0
type SearchResponseUsedIndicesItems0 struct {

	// begin
	// Format: date-time
	Begin strfmt.DateTime `json:"begin,omitempty"`

	// calculated at
	// Format: date-time
	CalculatedAt strfmt.DateTime `json:"calculated_at,omitempty"`

	// end
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// index name
	IndexName string `json:"index_name,omitempty"`

	// took ms
	TookMs int64 `json:"took_ms,omitempty"`
}

// Validate validates this search response used indices items0
func (m *SearchResponseUsedIndicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBegin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchResponseUsedIndicesItems0) validateBegin(formats strfmt.Registry) error {
	if swag.IsZero(m.Begin) { // not required
		return nil
	}

	if err := validate.FormatOf("begin", "body", "date-time", m.Begin.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SearchResponseUsedIndicesItems0) validateCalculatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("calculated_at", "body", "date-time", m.CalculatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SearchResponseUsedIndicesItems0) validateEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search response used indices items0 based on context it is used
func (m *SearchResponseUsedIndicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchResponseUsedIndicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchResponseUsedIndicesItems0) UnmarshalBinary(b []byte) error {
	var res SearchResponseUsedIndicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
