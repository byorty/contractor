// Code generated by MockGen. DO NOT EDIT.
// Source: asserter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	tester "github.com/byorty/contractor/tester"
	gomock "github.com/golang/mock/gomock"
)

// MockAsserterBuilder is a mock of AsserterBuilder interface.
type MockAsserterBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockAsserterBuilderMockRecorder
}

// MockAsserterBuilderMockRecorder is the mock recorder for MockAsserterBuilder.
type MockAsserterBuilderMockRecorder struct {
	mock *MockAsserterBuilder
}

// NewMockAsserterBuilder creates a new mock instance.
func NewMockAsserterBuilder(ctrl *gomock.Controller) *MockAsserterBuilder {
	mock := &MockAsserterBuilder{ctrl: ctrl}
	mock.recorder = &MockAsserterBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsserterBuilder) EXPECT() *MockAsserterBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockAsserterBuilder) Build(testCase *tester.TestCase) tester.AssertionProcessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", testCase)
	ret0, _ := ret[0].(tester.AssertionProcessor)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockAsserterBuilderMockRecorder) Build(testCase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockAsserterBuilder)(nil).Build), testCase)
}

// MockAssertionProcessor is a mock of AssertionProcessor interface.
type MockAssertionProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockAssertionProcessorMockRecorder
}

// MockAssertionProcessorMockRecorder is the mock recorder for MockAssertionProcessor.
type MockAssertionProcessorMockRecorder struct {
	mock *MockAssertionProcessor
}

// NewMockAssertionProcessor creates a new mock instance.
func NewMockAssertionProcessor(ctrl *gomock.Controller) *MockAssertionProcessor {
	mock := &MockAssertionProcessor{ctrl: ctrl}
	mock.recorder = &MockAssertionProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssertionProcessor) EXPECT() *MockAssertionProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockAssertionProcessor) Process(testCase *tester.TestCase) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process", testCase)
}

// Process indicates an expected call of Process.
func (mr *MockAssertionProcessorMockRecorder) Process(testCase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockAssertionProcessor)(nil).Process), testCase)
}

// MockAsserter is a mock of Asserter interface.
type MockAsserter struct {
	ctrl     *gomock.Controller
	recorder *MockAsserterMockRecorder
}

// MockAsserterMockRecorder is the mock recorder for MockAsserter.
type MockAsserterMockRecorder struct {
	mock *MockAsserter
}

// NewMockAsserter creates a new mock instance.
func NewMockAsserter(ctrl *gomock.Controller) *MockAsserter {
	mock := &MockAsserter{ctrl: ctrl}
	mock.recorder = &MockAsserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsserter) EXPECT() *MockAsserterMockRecorder {
	return m.recorder
}

// Assert mocks base method.
func (m *MockAsserter) Assert(value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assert", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Assert indicates an expected call of Assert.
func (mr *MockAsserterMockRecorder) Assert(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assert", reflect.TypeOf((*MockAsserter)(nil).Assert), value)
}

// GetActual mocks base method.
func (m *MockAsserter) GetActual() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActual")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetActual indicates an expected call of GetActual.
func (mr *MockAsserterMockRecorder) GetActual() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActual", reflect.TypeOf((*MockAsserter)(nil).GetActual))
}

// GetExpected mocks base method.
func (m *MockAsserter) GetExpected() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpected")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExpected indicates an expected call of GetExpected.
func (mr *MockAsserterMockRecorder) GetExpected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpected", reflect.TypeOf((*MockAsserter)(nil).GetExpected))
}
