// Code generated by MockGen. DO NOT EDIT.
// Source: asserter_2.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	tester "github.com/byorty/contractor/tester"
	gomock "github.com/golang/mock/gomock"
)

// MockAssertion2Factory is a mock of Assertion2Factory interface.
type MockAssertion2Factory struct {
	ctrl     *gomock.Controller
	recorder *MockAssertion2FactoryMockRecorder
}

// MockAssertion2FactoryMockRecorder is the mock recorder for MockAssertion2Factory.
type MockAssertion2FactoryMockRecorder struct {
	mock *MockAssertion2Factory
}

// NewMockAssertion2Factory creates a new mock instance.
func NewMockAssertion2Factory(ctrl *gomock.Controller) *MockAssertion2Factory {
	mock := &MockAssertion2Factory{ctrl: ctrl}
	mock.recorder = &MockAssertion2FactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssertion2Factory) EXPECT() *MockAssertion2FactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAssertion2Factory) Create(name string, definition interface{}) (tester.Asserter2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, definition)
	ret0, _ := ret[0].(tester.Asserter2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAssertion2FactoryMockRecorder) Create(name, definition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssertion2Factory)(nil).Create), name, definition)
}

// MockAsserter2 is a mock of Asserter2 interface.
type MockAsserter2 struct {
	ctrl     *gomock.Controller
	recorder *MockAsserter2MockRecorder
}

// MockAsserter2MockRecorder is the mock recorder for MockAsserter2.
type MockAsserter2MockRecorder struct {
	mock *MockAsserter2
}

// NewMockAsserter2 creates a new mock instance.
func NewMockAsserter2(ctrl *gomock.Controller) *MockAsserter2 {
	mock := &MockAsserter2{ctrl: ctrl}
	mock.recorder = &MockAsserter2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsserter2) EXPECT() *MockAsserter2MockRecorder {
	return m.recorder
}

// Assert mocks base method.
func (m *MockAsserter2) Assert(data interface{}) tester.AssertionResultList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assert", data)
	ret0, _ := ret[0].(tester.AssertionResultList)
	return ret0
}

// Assert indicates an expected call of Assert.
func (mr *MockAsserter2MockRecorder) Assert(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assert", reflect.TypeOf((*MockAsserter2)(nil).Assert), data)
}
